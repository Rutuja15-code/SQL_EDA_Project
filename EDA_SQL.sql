-- EXPLORATORY DATA ANALYSIS (EDA) ON SALES DATA
-- Tables: gold_dim_products, gold_dim_customers, gold_fact_sales

SELECT * FROM gold_dim_products;
SELECT * FROM gold_dim_customers;
SELECT * FROM gold_fact_sales;


SELECT * FROM INFORMATION_SCHEMA.TABLES;

-- Get unique country values from the customers table
SELECT DISTINCT country FROM gold_dim_customers;

-- Get unique categories, subcategories, and product names
SELECT DISTINCT category, subcategory, product_name FROM gold_dim_products;

-- 1 DATE RANGE ANALYSIS
-- Find the first and last order date to understand data range
SELECT 
    MIN(order_date) AS first_order_date,
    MAX(order_date) AS last_order_date
FROM gold_fact_sales;


-- 2️ BASIC METRICS / KPIs
-- Total Sales, Total Quantity, Avg Price, Orders, Products, Customers

-- Total revenue generated from all sales
SELECT SUM(sales_amount) AS total_sales FROM gold_fact_sales;


SELECT SUM(quantity) AS total_quantity FROM gold_fact_sales;

-- Average selling price across all sales
SELECT AVG(price) AS average_price FROM gold_fact_sales;

-- Total number of unique orders placed
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold_fact_sales;

-- Total number of unique products sold
SELECT COUNT(DISTINCT product_key) AS total_product FROM gold_fact_sales;

-- Total number of customers 
SELECT COUNT(customer_key) AS total_customer FROM gold_fact_sales;

-- Total number of unique customers who placed orders
SELECT COUNT(DISTINCT customer_key) AS total_customer FROM gold_fact_sales;


-- Combine all KPIs into one result set for a compact summary

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS value FROM gold_fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM gold_fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold_fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM gold_fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_key) FROM gold_fact_sales
UNION ALL
SELECT 'Total Customers', COUNT(DISTINCT customer_key) FROM gold_fact_sales;


-- 3️ AGGREGATION BY DIMENSIONS 
--  identify which groups contribute most to performance

-- Total customers by country(
SELECT
    country,
    COUNT(customer_key) AS total_customers
FROM gold_dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Average cost by product category
SELECT
    category,
    AVG(cost) AS avg_costs
FROM gold_dim_products
GROUP BY category
ORDER BY avg_costs DESC;


-- 4️ REVENUE ANALYSIS BY DIFFERENT SEGMENTS

-- Total revenue generated by each product category
SELECT 
    p.category,
    SUM(f.sales_amount) AS total_revenue
FROM gold_fact_sales f
LEFT JOIN gold_dim_products p
    ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Total revenue generated by each customer
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold_fact_sales f
LEFT JOIN gold_dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;


-- 5️ ITEM DISTRIBUTION ACROSS COUNTRIES
-- identify top-selling markets by quantity

SELECT
    c.country,
    SUM(f.quantity) AS total_sold_item
FROM gold_fact_sales f
LEFT JOIN gold_dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_item DESC;


-- 6️⃣ RANKING ANALYSIS
-- Top products, subcategories, and customers by performance
-- -------------------------------------------------------------

-- Top 5 products by total revenue
SELECT 
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold_fact_sales f
LEFT JOIN gold_dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;

-- Top 5 subcategories by total revenue
SELECT 
    p.subcategory,
    SUM(f.sales_amount) AS total_revenue
FROM gold_fact_sales f
LEFT JOIN gold_dim_products p
    ON p.product_key = f.product_key
GROUP BY p.subcategory
ORDER BY total_revenue DESC
LIMIT 5;

-- Top 10 customers who placed the most orders
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM gold_fact_sales f
LEFT JOIN gold_dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders DESC
LIMIT 10;



